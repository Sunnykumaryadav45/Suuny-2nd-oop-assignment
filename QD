D. A class called InvoiceItem, which models an item of an invoice, with ID, description,
quantity and unit price, is designed as shown in the question class diagram. Write the
InvoiceItem class.

public class InvoiceItem {
    // Instance variables
    private String id;
    private String desc;
    private int qty;
    private double unitPrice;

    // Constructor
    public InvoiceItem(String id, String desc, int qty, double unitPrice) {
        this.id = id;
        this.desc = desc;
        this.qty = qty;
        this.unitPrice = unitPrice;
    }

    // Getter methods
    public String getId() {
        return id;
    }

    public String getDesc() {
        return desc;
    }

    public int getQty() {
        return qty;
    }

    public double getUnitPrice() {
        return unitPrice;
    }

    // Setter methods
    public void setQty(int qty) {
        this.qty = qty;
    }

    public void setUnitPrice(double unitPrice) {
        this.unitPrice = unitPrice;
    }

    // Method to calculate total price
    public double getTotal() {
        return unitPrice * qty;
    }

    // toString method to provide string representation of the object
    @Override
    public String toString() {
        return "InvoiceItem[id=" + id + ", desc=" + desc + ", qty=" + qty + ", unitPrice=" + unitPrice + "]";
    }
}
-------------------------------------------------------------------------------------------------------------------------------------
public class Main {
    public static void main(String[] args) {
        // Create an InvoiceItem object
        InvoiceItem item1 = new InvoiceItem("ITM001", "Tab", 2, 1000.0);

        // Display item details using toString method
        System.out.println(item1); // Output: InvoiceItem[id=ITM001, desc=Tab, qty=2, unitPrice=1000.0]

        // Demonstrate quantity and unit price related methods
        item1.setQty(3);
        item1.setUnitPrice(1100.0);

        // Display updated details
        System.out.println("Updated quantity: " + item1.getQty()); 
        System.out.println("Updated unit price: " + item1.getUnitPrice()); 

        // Display total price
        System.out.println("Total price: " + item1.getTotal()); 
    }
}
